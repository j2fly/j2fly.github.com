<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cucumber | self.extended(thoughts)]]></title>
  <link href="http://jonkinney.com/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://jonkinney.com/"/>
  <updated>2014-10-01T14:10:15-05:00</updated>
  <id>http://jonkinney.com/</id>
  <author>
    <name><![CDATA[Jon Kinney]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[using PhantomJS (through poltergeist) and selenium in the same cucumber test suite]]></title>
    <link href="http://jonkinney.com/blog/2012/10/10/using-phantomjs-through-poltergeist-and-selenium-same-cucumber-test-suite/"/>
    <updated>2012-10-10T12:51:00-05:00</updated>
    <id>http://jonkinney.com/blog/2012/10/10/using-phantomjs-through-poltergeist-and-selenium-same-cucumber-test-suite</id>
    <content type="html"><![CDATA[<p>We use DocuSign at Bosltr to facilitate electronic signatures and testing this functionality with Cucumber has proved to be quite a pain. First of all DocuSign uses an iframe to deliver its functionality so there was that added complexity right off the bat. Secondly, because we&rsquo;re doing integration testing, I wanted to actually hit the DocuSign test servers and verify that things are still working as I expect. Stubbing the requests out wouldn&rsquo;t give me insight into any unexpected API changes breaking our app. Because we&rsquo;re reaching out externally I had to account for the delay in receiving data from DocuSign often needing to revert to ugly things like <code>sleep 3</code> in the step definitions.</p>

<p>The default Selenium driver through Firefox is the only solution for testing the DocuSign iframe that I could get working. However, the rest of the test suite that needs JavaScript testing has been working wonderfully on Poltergeist, an awesome headless PhantomJS driver for Capybara. Poltergeist was throwing errors about elements overlapping in the DocuSign iframe that I couldn&rsquo;t solve but I didn&rsquo;t want to abandon Poltergeist and revert to Selenium for ALL our JS testing, so I figured out a way to use both by tagging stories and using some Before and After hooks.</p>

<!-- more -->


<p>The rest of this post assumes you <a href="https://github.com/jonleighton/poltergeist">already have Poltergeist installed</a>.</p>

<p>Inside of <code>features/support/env.rb</code> add the following hooks:</p>

<pre><code class="ruby"># Hooks
Before('@docusign') do |scenario|
  Capybara.current_driver = :selenium
end

After('@docusign') do |scenario|
  Capybara.use_default_driver
end
</code></pre>

<p>Additionally, add:</p>

<pre><code class="ruby">Capybara.default_driver = :rack_test
Capybara.javascript_driver = :poltergeist
</code></pre>

<p>&hellip;which I actually have in my <code>Spork.each_run do</code> block</p>

<p>Now by default any stories tagged with just <code>@javascript</code> will run through PhantomJS. If you want to use Selenium for a given test then you need to tag it with BOTH <code>@javascript</code> AND <code>@docusign</code>. Perhaps naming the tag <code>@selenium</code> would be more appropriate, but I only plan to use Selenium for testing DocuSign stories so this works for me for now. Note: I&rsquo;m not sure why the <code>@javascript</code> tag is required, but it didn&rsquo;t work for me unless I had both tags specified. I&rsquo;m guessing <code>@javacript</code> sets up more than just the driver, but if anyone has more of an explanation I&rsquo;d love to know.</p>

<p>In an effort to help other devs perhaps more quickly acceptance test DocuSign with Cucumber here are the step definitions that I came up with for our use case.</p>

<pre><code class="ruby">When /^I sign the docusign document as an "(.+)" and click finish$/ do |user_type|
  sleep 3

  within_frame("docusign_iframe") do
    # Docusign disclaimer (review button)
    click_button 'ds_hldrBdy_dlgStart_startReview_btnInline'

    # Sign
    page.find_button('Sign Here').click

    # Adopt and sign (might not always need to do this step if the user has
    # already adopted his or her signature. I would have though we'd have to
    # adopt each time in the testing world but it doesn't seem to be that way)
    if page.has_css?('#ds_hldrBdy_dlgAdoptSig_btnAdoptSignature_btnInline')
      click_button 'ds_hldrBdy_dlgAdoptSig_btnAdoptSignature_btnInline'
    end

    if user_type == 'attorney'
      # DocuSign gives us .FirstPage as a class on the first page and just
      # .Page for each page after that, so this really only works if your first
      # 'Sign Here' is on the first page and there is only one subsequent one
      # within all of the rest of the .Page pages. Still, fits this use case
      # alright as long as the engagement letters in the test env fit on one
      # page so the attorney disclaimer bit is always on page two.
      within(:xpath, "//div[@class='Page' and @class != 'FirstPage']") do
        click_button 'Sign Here'
      end
    end

    # Confirm signing
    click_button 'ds_hldrBdy_navnexttext_btnInline'
  end

  sleep 3
end


When /^I choose to sign the docusign document later$/ do
  sleep 3

  within_frame("docusign_iframe") do
    # Finish Later
    click_button 'ds_hldrBdy_dlgStart_btnIntroSignLater_btnInline'
  end

  sleep 3
end


When /^I decline to sign the docusign document$/ do
  sleep 3

  within_frame("docusign_iframe") do
    # Decline to Sign
    click_button 'ds_hldrBdy_dlgStart_btnIntroDecline_btnInline'

    # Decline confirmation
    click_button 'ds_hldrBdy_dlgDecline_btnDecline_btnInline'
  end

  sleep 3
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using save_and_open_page to open failed cucumber scenerios in a browser with images and  CSS]]></title>
    <link href="http://jonkinney.com/blog/2010/04/21/using-save-and-open-page-to-open-failed-cucumber-scenerios-in-a-browser-with-images-and-css/"/>
    <updated>2010-04-21T16:43:00-05:00</updated>
    <id>http://jonkinney.com/blog/2010/04/21/using-save-and-open-page-to-open-failed-cucumber-scenerios-in-a-browser-with-images-and-css</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing a lot of Cucumber testing lately and have really been liking it, but there is one thing that is hard with Cucumber&hellip; debugging errors. That is until I found out about the save_and_open_page method that webrat provides for opening a browser to the page the cuke puked on from Bodaniel Jeanes over on <a target='_blank' href="http://bjeanes.com/2010/02/10/automatically-open-the-last-page-for-failed-scenarios">his blog</a>.</p>

<p>The only problem was that the page didn&rsquo;t look very nice. I could have left it (it was working after all) but then I ran across <a target='_blank' href="http://gist.github.com/320890">an init script for cuke</a> in a gist from Duff that allowed for the rewriting of the paths to the local image, JavaScript and CSS files so they at least could be referenced properly. While this worked, most of my images were specified as backgrounds in my actual CSS files so if I wanted to be able to see the page as it was intended I would need to find a way to change the paths in the actual CSS files as well.</p>

<!-- more -->


<p>After playing around with the idea of modifying my actual CSS files temporarily and then switching them back (and realizing that solution was full of fail) I settled on a way strip out all links to all css files and then embed the actual CSS inline in a style tag inside the page&rsquo;s head tag. This way I can more easily and permanently modify the css background image paths all in a self contained HTML file. I did this by looping through a specified directory on the file system that contains CSS files and looking for any stylesheets that the user specifies and in the order that the user specifies so that the hierarchy would remain in tact when the styles were all embedded inline.</p>

<p>Since Cucumber&rsquo;s env.rb file is auto-generated it&rsquo;s a bad place to store customized configuration options. Instead I encourage you to do what Cucumber says at the top of the env.rb file and put it somewhere else. From env.rb: &ldquo;Cucumber will automatically load all features/<em>*/</em>.rb files&rdquo;</p>

<p>I chose to put this code in a file under the features/support directory called: open_browser_on_fail.rb. If it&rsquo;s sitting next to the env.rb file itself then you have the new file in the right place.</p>

<p>Place the following code in that file and you&rsquo;ll be good to go!</p>

<pre><code class="ruby">After do |scenario|  
  if scenario.status == :failed
    save_and_open_page
  end  
end

module Webrat
  module SaveAndOpenPage
    def save_and_open_page
      return unless File.exist?(Webrat.configuration.saved_pages_dir)

      filename = "#{Webrat.configuration.saved_pages_dir}/webrat-#{Time.now.to_i}.html"

      File.open(filename, "w") do |f|
        f.write rewrite_public_file_references(response_body)
      end

      open_in_browser(filename)
    end

    def rewrite_public_file_references(response_html)
      # remove conditional comments/ie stylesheets
      response_html.gsub!(/&lt;!--\[.*?\]--&gt;/im, '')
      # remove other stylesheets
      response_html.gsub!(/&lt;link href=(.*)\/&gt;/i, '')

      response_html.gsub!(/("|')\/(stylesheets|images|javascripts)/, '\1' + '../public' + '/\2')

      response_html.gsub!(/&lt;\/head&gt;/i, "&lt;style&gt;#{rewrite_public_stylesheet_image_references('\/images', '../public')}&lt;\/style&gt;\n&lt;\/head&gt;")
    end

    def rewrite_public_stylesheet_image_references(regex, server_url)
      dir = "/Users/jkinney/Sites/Rails/Client/new_rails_app/public/stylesheets/"

      stylesheets = %w(reset admin main js_menu css_tabs firefox)

      css = ""
      stylesheets.each do |file|
        # puts file
        lines = []
        File.open(dir+file+".css", "r"){|f| lines = f.readlines }
        lines = lines.inject([]){|l, line| l &lt;&lt; line.gsub(/#{regex}/i, "#{server_url}/images")}
        css &lt;&lt; lines.to_s
      end
      css
    end

  end
end
</code></pre>
]]></content>
  </entry>
  
</feed>
