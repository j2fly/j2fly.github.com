<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | self.extended(thoughts)]]></title>
  <link href="http://j2fly.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://j2fly.github.com/"/>
  <updated>2012-07-08T21:44:33-05:00</updated>
  <id>http://j2fly.github.com/</id>
  <author>
    <name><![CDATA[Jon Kinney]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking Out of an iframe From a Rails Controller]]></title>
    <link href="http://j2fly.github.com/blog/2012/07/08/breaking-out-of-an-iframe-from-a-rails-controller/"/>
    <updated>2012-07-08T03:56:00-05:00</updated>
    <id>http://j2fly.github.com/blog/2012/07/08/breaking-out-of-an-iframe-from-a-rails-controller</id>
    <content type="html"><![CDATA[<p>For the <a href="https://github.com/j2fly/docusign_rest">docusign_rest</a> gem that I recently created I needed to break out of the DocuSign iframe after a signer successfully signed the embedded PDF and redirect to a controller action showing that action's view.</p>

<p>After a bit of Googling I found this code snippet:</p>

<p>```html
<html>
  <body></p>

<pre><code>&lt;script type='text/javascript' charset='utf-8'&gt;
  parent.location.href = '/myloc';
&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Which can be implemented in a Rails controller like so:</p>

<p><code>ruby
render text: "&lt;html&gt;&lt;body&gt;&lt;script type='text/javascript' charset='utf-8'&gt;window.parent.document.location.href = '/myloc';&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;", content_type: :html
</code></p>

<!-- more -->


<p>The above code snippet takes the place of the traditional <code>redirect_to</code>. The beauty of this solution is that after the signer interacts with the document and completes his or her signing ceremony, the app will act just like we had served the embedded signing iframe code directly from our own view. There isn't a button to click that says "go to parent" or "back to home" or anything, it just works and redirects appropriately when the user is done interacting with the iframe.</p>

<p>I created a little utility method in the <a href="https://github.com/j2fly/docusign_rest/blob/master/lib/docusign_rest/utility.rb#L49">docusign_rest</a> gem to abstract the JS portion and make it more consise. See lines 23 and 26 in the example controller code below:</p>

<p>```ruby  <br/>
class SomeController &lt; ApplicationController</p>

<p>  # the view corresponding to this action has the iframe in it with the
  # @url as it's src. @envelope_response is populated from either:
  # @envelope_response = client.create_envelope_from_document
  # or
  # @envelope_response = client.create_envelope_from_template
  def embedded_signing</p>

<pre><code>client = DocusignRest::Client.new
@url = client.get_recipient_view(
  envelope_id: @envelope_response["envelopeId"],
  name: current_user.display_name,
  email: current_user.email,
  return_url: "http://localhost:3000/docusign_response"
)
</code></pre>

<p>  end</p>

<p>  def docusign_response</p>

<pre><code>utility = DocusignRest::Utility.new

if params[:event] == "signing_complete"
  flash[:notice] = "Thanks! Successfully signed"
  render :text =&gt; utility.breakout_path(some_path), content_type: :html
else
  flash[:notice] = "You chose not to sign the document."
  render :text =&gt; utility.breakout_path(some_other_path), content_type: :html
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Here is the method in the Utility class of the DocuSign module that handles embedding the path in the HTML snippet.</p>

<p><code>ruby
def breakout_path(path)
  "&lt;html&gt;&lt;body&gt;&lt;script type='text/javascript' charset='utf-8'&gt;parent.location.href = '#{path}';&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;"
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using save_and_open_page to open failed cucumber scenerios in a browser with images and  CSS]]></title>
    <link href="http://j2fly.github.com/blog/2010/04/21/using-save-and-open-page-to-open-failed-cucumber-scenerios-in-a-browser-with-images-and-css/"/>
    <updated>2010-04-21T16:43:00-05:00</updated>
    <id>http://j2fly.github.com/blog/2010/04/21/using-save-and-open-page-to-open-failed-cucumber-scenerios-in-a-browser-with-images-and-css</id>
    <content type="html"><![CDATA[<p>I've been doing a lot of Cucumber testing lately and have really been liking it, but there is one thing that is hard with Cucumber... debugging errors. That is until I found out about the save_and_open_page method that webrat provides for opening a browser to the page the cuke puked on from Bodaniel Jeanes over on <a target='_blank' href="http://bjeanes.com/2010/02/10/automatically-open-the-last-page-for-failed-scenarios">his blog</a>.</p>

<p>The only problem was that the page didn't look very nice. I could have left it (it was working after all) but then I ran across <a target='_blank' href="http://gist.github.com/320890">an init script for cuke</a> in a gist from Duff that allowed for the rewriting of the paths to the local image, JavaScript and CSS files so they at least could be referenced properly. While this worked, most of my images were specified as backgrounds in my actual CSS files so if I wanted to be able to see the page as it was intended I would need to find a way to change the paths in the actual CSS files as well.</p>

<!-- more -->


<p>After playing around with the idea of modifying my actual CSS files temporarily and then switching them back (and realizing that solution was full of fail) I settled on a way strip out all links to all css files and then embed the actual CSS inline in a style tag inside the page's head tag. This way I can more easily and permanently modify the css background image paths all in a self contained HTML file. I did this by looping through a specified directory on the file system that contains CSS files and looking for any stylesheets that the user specifies and in the order that the user specifies so that the hierarchy would remain in tact when the styles were all embedded inline.</p>

<p>Since Cucumber's env.rb file is auto-generated it's a bad place to store customized configuration options. Instead I encourage you to do what Cucumber says at the top of the env.rb file and put it somewhere else. From env.rb: "Cucumber will automatically load all features/<em>*/</em>.rb files"</p>

<p>I chose to put this code in a file under the features/support directory called: open_browser_on_fail.rb. If it's sitting next to the env.rb file itself then you have the new file in the right place.</p>

<p>Place the following code in that file and you'll be good to go!</p>

<p>```ruby
After do |scenario|<br/>
  if scenario.status == :failed</p>

<pre><code>save_and_open_page
</code></pre>

<p>  end<br/>
end</p>

<p>module Webrat
  module SaveAndOpenPage</p>

<pre><code>def save_and_open_page
  return unless File.exist?(Webrat.configuration.saved_pages_dir)

  filename = "#{Webrat.configuration.saved_pages_dir}/webrat-#{Time.now.to_i}.html"

  File.open(filename, "w") do |f|
    f.write rewrite_public_file_references(response_body)
  end

  open_in_browser(filename)
end

def rewrite_public_file_references(response_html)
  # remove conditional comments/ie stylesheets
  response_html.gsub!(/&lt;!--\[.*?\]--&gt;/im, '')
  # remove other stylesheets
  response_html.gsub!(/&lt;link href=(.*)\/&gt;/i, '')

  response_html.gsub!(/("|')\/(stylesheets|images|javascripts)/, '\1' + '../public' + '/\2')

  response_html.gsub!(/&lt;\/head&gt;/i, "&lt;style&gt;#{rewrite_public_stylesheet_image_references('\/images', '../public')}&lt;\/style&gt;\n&lt;\/head&gt;")
end

def rewrite_public_stylesheet_image_references(regex, server_url)
  dir = "/Users/jkinney/Sites/Rails/Client/new_rails_app/public/stylesheets/"

  stylesheets = %w(reset admin main js_menu css_tabs firefox)

  css = ""
  stylesheets.each do |file|
    # puts file
    lines = []
    File.open(dir+file+".css", "r"){|f| lines = f.readlines }
    lines = lines.inject([]){|l, line| l &lt;&lt; line.gsub(/#{regex}/i, "#{server_url}/images")}
    css &lt;&lt; lines.to_s
  end
  css
end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily convert a has_and_belongs_to_many to a has_many_through in Rails (for: MS SQL Server)]]></title>
    <link href="http://j2fly.github.com/blog/2010/03/06/easily-convert-a-has-and-belongs-to-many-to-a-has-many-through-in-rails-for-ms-sql-server/"/>
    <updated>2010-03-06T16:53:00-06:00</updated>
    <id>http://j2fly.github.com/blog/2010/03/06/easily-convert-a-has-and-belongs-to-many-to-a-has-many-through-in-rails-for-ms-sql-server</id>
    <content type="html"><![CDATA[<p>One of the things that bugged me about Rails when they made the move from only having has_and_belongs_to_many (HABTM) to also including the has_many_through (HM:T) join model option (which is now the preferred way to go), was that you needed to write your own code in the model to get the associations to work properly. With the old HABTM implementation this was handled for you.</p>

<!-- more -->


<p>Writing the association code yourself required some array math and it was hard to remember what order to do things in and how to exactly format it. I had to copy and paste the code in from a snippet library every time. Not only that but it was ugly and a pain in the butt to maintain, and really felt like it should be handled in the core Rails framework. It looked like this (at least my version):</p>

<p>```ruby</p>

<h1>This is from an old app that managed a relationship between MetaKeywords and Pages</h1>

<p>def manage_meta_keyword_associations(new_meta_keywords)
  current_meta_keywords = MetaKeywordPage.find_all_by_page_id(self.id).collect{|mkp| mkp.meta_keyword_id.to_s}</p>

<p>  meta_keywords_to_add = new_meta_keywords - current_meta_keywords
  for meta_keyword in meta_keywords_to_add</p>

<pre><code>MetaKeywordPage.create(:meta_keyword_id =&gt; meta_keyword, :page_id =&gt; self.id) 
</code></pre>

<p>  end</p>

<p>  meta_keywords_to_remove = current_meta_keywords - new_meta_keywords
  for meta_keyword in meta_keywords_to_remove</p>

<pre><code>MetaKeywordPage.find_by_meta_keyword_id_and_page_id(meta_keyword, self.id).destroy
</code></pre>

<p>  end
end
```</p>

<p>Here's <a href="http://paulbarry.com/articles/2007/10/24/has_many-through-checkboxes">another post</a> detailing this requirement, but luckily as of 18 months ago (or longer) Rails no longer makes you manage that association code yourself. While this isn't news in and of itself, it's important if you're working with a legacy app and you try to convert a HABTM to a HM:T and can't figure out why it's not working. That's exactly what happened to me a few weeks ago after digging back into an old codebase. I needed the HM:T implementation though because I needed to add the position column to the join table to allow users to order their locations by the most recently added one. The app I'm working in has users, employers and locations. Users and locations are associated through the locations_users (join table) and locations belong to employers, thus users are associated to employers through the locations_users table.</p>

<p>The problem is that there was a lot of data in my existing HABTM table (locations_users) that I needed to retain and I wasn't sure how to go about doing this. I'm also using Microsoft SQL Server 2005 with my Ruby on Rails app so that throws another kink in the mix as most google searches will only yield info for MySQL or PostgreSQL. I thought about just modifying the table directly in SQL Management Studio but that was less than desirable because it is hard to automate and hard to document. However, most .NET developers I know use "change scripts" instead of migrations like we do in the Rails world so I thought about how I could get a hybrid solution working.</p>

<p>I modified the table in our staging environment with SQL Management Studio, I added an "id" column, and both "updated_at" and "created_at" timestamp columns and then generated a change script. Note: it's important that when in design mode that you click the "generate change script" button before saving the table, otherwise if you save the table before generating the change script you can't click the change script button anymore... it gets grayed out.</p>

<p>Initially I tried just executing the whole change script directly in an execute block inside of self.up, which would look something like this:</p>

<p>```ruby
class ModifyLocationsUsersToBeHmt &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>execute "change script here"
</code></pre>

<p>  end
end
```</p>

<p>Unfortunately that didn't work, but I did manage to figure out a way to still execute the change script incrementally. I just needed a new "execute" call for each SQL statement (which you can see in the final code example at the end of this post). The last thing to do was to try to execute this task with some sort of fail-safe so that I wouldn't screw up my data if something went wrong. Luckily ActiveRecord supports transactions as long as your database does, and SQLServer 2005 definitely supports them. In fact they're in the change script as "BEGIN TRANSACTION", we just can't execute that code directly in our migration which is why you don't see them in the final code example.</p>

<p>For more discussion on transactions in Rails look at this <a href="http://stackoverflow.com/questions/686852/rolling-back-a-failed-rails-migration">stackoverflow thread</a>.</p>

<p>```ruby</p>

<h1>A transaction in Active Record</h1>

<p>ActiveRecord::Base.transaction do
  execute "update users set enabled = 1 where name like 'batman'"
end
```</p>

<p>Because we want to retain all the data that exists in the join table and we're adding an ID col with some timestamps and re-positioning the fields, SQL Server will be creating a tmp table, dumping all our records into that, then renaming the tmp table to locations_users and modifying the ID col to be a true auto-incrementing primary column. Here is the final, transactional Active Record Migration for SQL Server 2005.</p>

<p>```ruby
class ModifyLocationsUsersToBeHmt &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>ActiveRecord::Base.transaction do
  execute "
  CREATE TABLE dbo.Tmp_locations_users
    (
    id int NOT NULL IDENTITY (1, 1),
    location_id int NOT NULL,
    user_id int NOT NULL,
    created_at datetime NULL,
    updated_at datetime NULL
    ) ON [PRIMARY]
  "
  execute "SET IDENTITY_INSERT dbo.Tmp_locations_users OFF"

  execute "IF EXISTS(SELECT * FROM dbo.locations_users)
     EXEC('INSERT INTO dbo.Tmp_locations_users (location_id, user_id)
      SELECT location_id, user_id FROM dbo.locations_users WITH (HOLDLOCK TABLOCKX)')"
  execute "DROP TABLE dbo.locations_users"
  execute "EXECUTE sp_rename N'dbo.Tmp_locations_users', N'locations_users', 'OBJECT'"

  execute"ALTER TABLE dbo.locations_users ADD CONSTRAINT
    PK_locations_users PRIMARY KEY CLUSTERED 
    (
    id
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]"


  execute "CREATE NONCLUSTERED INDEX index_locations_users_on_location_id ON dbo.locations_users
    (
    location_id
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]"

  execute = "CREATE NONCLUSTERED INDEX index_locations_users_on_user_id ON dbo.locations_users
    (
    user_id
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
  "

  execute "update locations_users set created_at = '1-1-2010'"
  execute "update locations_users set updated_at = '1-1-2010'"

  add_column :locations_users, :position, :integer
end
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>ActiveRecord::Base.transaction do
  remove_column :locations_users, :position
  remove_column :locations_users, :id
  remove_column :locations_users, :created_at
  remove_column :locations_users, :updated_at
end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Locale on OS X Snow Leopard for FreeTDS Functionality]]></title>
    <link href="http://j2fly.github.com/blog/2009/11/23/change-locale-on-os-x-snow-leopard-for-freetds-functionality/"/>
    <updated>2009-11-23T15:29:00-06:00</updated>
    <id>http://j2fly.github.com/blog/2009/11/23/change-locale-on-os-x-snow-leopard-for-freetds-functionality</id>
    <content type="html"><![CDATA[<p>Recently I've been trying to get my new unibody macbook pro connecting to SQL Server 2005 with FreeTDS. I was following the <a href="http://www.metaskills.net/2009/9/5/the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more">great guide</a> from Ken Collins, author of the <a href="http://github.com/rails-sqlserver/2000-2005-adapter">rails-sqlserver activerecord adapter</a> that I use but no matter what configuration settings I edited I couldn't get my machine to connect to the SQL Server.</p>

<!-- more -->


<p>When checking the event viewer on the Windows Server 2k8 box I received the following error:</p>

<p><code>ruby
"The login packet used to open the connection is structurally invalid;
the connection has been closed.
Please contact the vendor of the client library."
</code></p>

<p>I was pretty sure it had to do with my locale because if that was incorrect it would make sense that the packets might be structurally invalid. My locale was set to <code>en_US.us-ascii</code> the default setting apparently after a clean OS X Snow Leopard install. The problem was that I couldn't figure out how to change it. Then I ran across <a href="http://lists.ibiblio.org/pipermail/freetds/2007q4/022436.html">this archived post</a> and I was able to temporarily change my locale by typing:</p>

<p><code>bash
export LC_ALL=en_US.UTF-8
</code></p>

<p>I was able to verify my locale settings by typing <code>locale</code> in a terminal window which yielded the following:</p>

<p><code>bash
LANG=
LC_COLLATE="en_US.UTF-8"
LC_CTYPE="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_ALL="en_US.UTF-8"
</code></p>

<p>The problem is if I opened a new terminal window my locale was back to the default ascii junk. To make this change permanent I simply had to edit my ~/.profile and add the export statement that we set earlier to the bottom of the file.</p>

<p><code>bash
export LC_ALL=en_US.UTF-8
</code></p>

<p>Now when I open a new window and type <code>locale</code> it says <code>en_US.UTF-8</code> for everything. At this point I was able to continue following Ken's guide for testing the TSQL commands and getting ruby-dbi and everything else wired up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to Multiple Server Environments with Cap]]></title>
    <link href="http://j2fly.github.com/blog/2009/04/30/deploying-to-multiple-server-environments-with-cap/"/>
    <updated>2009-04-30T16:49:00-05:00</updated>
    <id>http://j2fly.github.com/blog/2009/04/30/deploying-to-multiple-server-environments-with-cap</id>
    <content type="html"><![CDATA[<p>Most anytime I develop a web application I need to deploy to multiple server environments. For me this used to mean maintaining two separate deploy.rb scripts, and I would rename one while deploying to staging, and then rename the other when I needed to deploy to production. After about three deploys I said, the hell with this! And I figured out how to allow the specification of your deployment at the command line during the cap deploy task.</p>

<!-- more -->


<p>Now I know what you're thinking, why not create your own cap task that is called cap deploy_production and cap deploy_staging (or whatever), but I didn't want to muck around with that. Here is how I get Capistrano to prompt ME!</p>

<p>```ruby
default_run_options[:pty] = true
ssh_options[:forward_agent] = true</p>

<h1>also had to set up id_ras keys for the deploy user on the production box (to itself). And setup the tunnel definition as well in ~/.subversion/config</h1>

<h1>Local => rs_ssh = /opt/local/bin/ssh -p 2384 -l jkinney</h1>

<h1>Production => rs_ssh = /usr/bin/ssh -p 2384 -l jkinney</h1>

<p>set :gems_for_project, %w(highline,will_paginate,etc...) # list of gems to be installed</p>

<h1>Make terminal prompt us for the location we want to deploy to</h1>

<p>set :deploy_location, Proc.new { deploy_location = Capistrano::CLI.ui.ask "Enter deploy location (stage/prod)" }</p>

<p>if "#{deploy_location}" == "prod"
  set :domain, "209.41.75.42"
else
  # I have ssh setup on a non-standard port for my staging box, since it's exposed to the world. Our production box required VPN or local netowrk access.
  ssh_options[:port] = 2384
  set :domain, "YOUR STAGING IP HERE"
  # note that your staging could be on the same server, just setup your application names differently then so you aren't overwriting things.
end</p>

<h1>prompts for a release tag, if that is your sort of thing...</h1>

<p>set :release_tag, Proc.new { release_tag = Capistrano::CLI.ui.ask "Enter a release tag to deploy (type trunk or leave blank and hit enter to deploy from trunk)" }</p>

<p>role :app, domain
role :web, domain
role :db,  domain, :primary => true</p>

<p>set :application, "jonkinneydotcom"</p>

<p>set :user, "deploy"
set :password, "secret"
set :deploy_to, "/var/www/apps/#{application}"</p>

<p>set :rails_env, "production"</p>

<h1>I thought this was automatic, but I seem to need to require it to cleanup my releases</h1>

<p>set :keep_releases, 4
after "deploy", "deploy:cleanup"</p>

<h1>this is using subversion, I am transitioning to GIT and will post updates when I have a modified deploy.rb</h1>

<p>set :repo_location, "/var/svn/your_subversion_repo"
set :repository, "svn+ssh://#{domain}#{repo_location}/#{application}/trunk"</p>

<p>namespace :deploy do
  desc "restart passenger"
  task :restart, :roles => :app, :except => {:no_release => true} do</p>

<pre><code>run "touch #{current_path}/tmp/restart.txt"
</code></pre>

<p>  end</p>

<p>  [:start, :stop].each do |t|</p>

<pre><code>desc "#{t} task is a no-op with passenger"
task t, :roles =&gt; :app do; end
</code></pre>

<p>  end</p>

<p>  task :after_symlink do</p>

<pre><code>run "chmod -R a+rw #{release_path}/public"

#rcov messes with deployed apps...remove it in production
run "rm -rf #{release_path}/vendor/plugins/rails_rcov" 

# OPTIONAL: symlink files from the FTP site's home directory to the rails_root 
# keep them protected and use send_file to present them to the logged in user 
# (this is more secure than hiding them in a public directory with directory listing off)
# run "rm -rf #{release_path}/admin_files" 
# run "ln -s #{deploy_to}/#{shared_dir}/admin_files #{release_path}"    

#symlink the files from outside the deploy path so we can keep all the uploaded images!
# This will allow images uploaded through an asset manager to be retained between deployments
run "rm -rf #{release_path}/public/assets" 
run "ln -s #{deploy_to}/#{shared_dir}/assets #{release_path}/public/assets"

# setup database for production environment (database.yml should be ignored in svn)
db_params = {
  "adapter"=&gt;"mysql",
  "database"=&gt;"yourapp_production",
  "username"=&gt;"root",
  "password"=&gt;"secret",
  "host"=&gt;"localhost",
}

# OPTIONAL: Deploy to production with a sqlite3 database...because we don't need anything elaborage. 
# And that way we can reset the db every hour or whatever with a cron job
# db_params = {
#   "adapter"=&gt;"sqlite3",
#   "database"=&gt;"db/production.sqlite3.db",
#   "timeout"=&gt;"5000"
# }

db_params.each do |param, default_val|
  set "db_#{param}".to_sym,
  #if you want to be prompted uncomment the line below this and comment out the one directly below that
  # lambda { Capistrano::CLI.ui.ask "Enter database #{param}" do |q| q.default=default_val end}
  param = default_val
end

# builds the database.yml
database_configuration = "production:\n"
db_params.each do |param, default_val|
  val=self.send("db_#{param}")
  database_configuration&lt;&lt;"  #{param}: #{val}\n"
end

run "mkdir -p #{deploy_to}/#{shared_dir}/config"

put database_configuration, "#{deploy_to}/#{shared_dir}/config/database.yml"    

#symlink the database.yml
run "ln -s #{deploy_to}/#{shared_dir}/config/database.yml #{deploy_to}/current/config"

#symlink the production database
run "ln -s #{deploy_to}/#{shared_dir}/config/production.sqlite3.db #{deploy_to}/current/db"
</code></pre>

<p>  end
end</p>

<h1>This is what asks you if you're sure you want to deploy to production?!?!?</h1>

<p>before "deploy:update_code", "user_confirmation_for_production_deployment"
task :user_confirmation_for_production_deployment, roles => :app do
  if "#{deploy_location}" == 'prod'</p>

<pre><code>message = "You are deploying to PRODUCTION. continue(y/n):"
answer = Capistrano::CLI.ui.ask(message)   
abort "deployment to production was stopped" unless answer == 'y'
</code></pre>

<p>  end
end</p>

<h6>################Custom cap tasks that I find useful</h6>

<p>desc "Configure VHost"
task :config_vhost do
  vhost_config =&lt;<-EOF
<VirtualHost *:80>
  ServerName jonkinney.com
  ServerAlias www.jonkinney.com
  DocumentRoot #{deploy_to}/current/public
</VirtualHost>
  EOF
  put vhost_config, "#{deploy_to}/#{shared_dir}/config/vhost_config"
  sudo "mv #{deploy_to}/#{shared_dir}/config/vhost_config /etc/apache2/sites-available/#{application}"
  sudo "a2ensite #{application}"
  sudo "/etc/init.d/apache2 reload"
end</p>

<p>desc "create assets directory"
task :create_assets_directory do
  sudo "mkdir -p #{deploy_to}/#{shared_dir}/assets"
  sudo "chmod -R 777 #{deploy_to}/#{shared_dir}/assets"
  sudo "chown -R deploy:www-data #{deploy_to}/#{shared_dir}/assets"
end</p>

<p>desc "make current development database the production database"
task :upload_dev_db_to_prod do
  put(File.read("db/development.sqlite3.db"), "#{deploy_to}/#{shared_dir}/config/production.sqlite3.db")
end</p>

<p>desc "run remote command"
task :show, :roles => :app do
  run &lt;&lt;-COMMAND</p>

<pre><code>/var/www/apps/#{application}/current/script/runner -e production 'require "pp"; pp #{command}'
</code></pre>

<p>  COMMAND
end</p>

<p>desc "run remote rake db:migrate RAILS_ENV=production"
task :remote_db_migrate do
  run("cd #{deploy_to}/current; /usr/bin/rake db:migrate RAILS_ENV=production")
end
```</p>

<p>Hopefully this has been helpful. I know Capistrano can be somewhat of a black box for people, so if you have issues with my deploy.rb or need any help feel free to contact me or post in the comments!</p>
]]></content>
  </entry>
  
</feed>
